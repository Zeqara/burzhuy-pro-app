// ... (–Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π Firebase –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

document.addEventListener('DOMContentLoaded', () => {
    // ... (DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    // --- –ù–û–í–´–ï DOM –≠–õ–ï–ú–ï–ù–¢–´ –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---
    const adminMenuContainer = document.getElementById('admin-menu-container');
    const scheduleForm = document.getElementById('schedule-form');
    const scheduleLocationSelect = document.getElementById('schedule-location-select');
    const scheduleDateInput = document.getElementById('schedule-date-input');
    const timeSlotsContainer = document.getElementById('time-slots-container');
    const addSlotBtn = document.getElementById('add-slot-btn');
    const scheduleUrgentCheckbox = document.getElementById('schedule-urgent-checkbox');
    const scheduleList = document.getElementById('schedule-list');

    let currentUserRole = 'guest'; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    // ... (–≤–µ—Å—å –∫–æ–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    // --- –ì–õ–ê–í–ù–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–† –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    auth.onAuthStateChanged(user => {
        if (user) {
            const userRef = db.collection('users').doc(user.uid);
            userRef.get().then(doc => {
                if (doc.exists) {
                    const userData = doc.data();
                    currentUserRole = userData.role || 'guest';
                    userNameDisplay.textContent = userData.fullName;
                    setupAdminUI(); // <--- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø
                    showScreen('main-menu-screen');
                } else {
                    showScreen('profile-setup-screen');
                }
            });
        } else {
            currentUserRole = 'guest';
            setupAdminUI();
            // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞) ...
        }
    });

    // --- –õ–û–ì–ò–ö–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

    // 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å 'admin'
    function setupAdminUI() {
        adminMenuContainer.innerHTML = '';
        if (currentUserRole === 'admin') {
            const adminButton = document.createElement('li');
            adminButton.className = 'menu-list-item menu-btn';
            adminButton.dataset.target = 'admin-schedule-screen';
            adminButton.innerHTML = `
                <i class="icon fa-solid fa-user-shield"></i>
                <div><strong>–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</strong><small>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–º –ø—Ä–æ–≤–µ—Ä–æ–∫</small></div>
            `;
            adminButton.addEventListener('click', () => {
                loadLocationsForAdmin();
                renderSchedules();
                showScreen('admin-schedule-screen');
            });
            adminMenuContainer.appendChild(adminButton);
        }
    }

    // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º—É
    async function loadLocationsForAdmin() {
        scheduleLocationSelect.innerHTML = '<option value="">–ó–∞–≥—Ä—É–∑–∫–∞...</option>';
        try {
            const snapshot = await db.collection('locations').get();
            if (snapshot.empty) {
                scheduleLocationSelect.innerHTML = '<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π</option>';
                return;
            }
            let optionsHTML = '<option value="" disabled selected>-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É --</option>';
            snapshot.forEach(doc => {
                const location = doc.data();
                optionsHTML += `<option value="${doc.id}" data-name="${location.name}" data-address="${location.address}">${location.name} (${location.address})</option>`;
            });
            scheduleLocationSelect.innerHTML = optionsHTML;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π:", error);
            scheduleLocationSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
        }
    }

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
    let slotCounter = 0;
    function addSlotInput() {
        slotCounter++;
        const slotDiv = document.createElement('div');
        slotDiv.className = 'time-slot-input';
        slotDiv.innerHTML = `
            <input type="time" class="slot-start" required> - 
            <input type="time" class="slot-end" required>
            <button type="button" class="remove-slot-btn">√ó</button>
        `;
        timeSlotsContainer.appendChild(slotDiv);
        slotDiv.querySelector('.remove-slot-btn').addEventListener('click', () => {
            slotDiv.remove();
        });
    }
    addSlotBtn.addEventListener('click', addSlotInput);
    addSlotInput(); // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–æ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    scheduleForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const selectedOption = scheduleLocationSelect.options[scheduleLocationSelect.selectedIndex];
        const locationId = selectedOption.value;
        const locationName = selectedOption.dataset.name;
        const locationAddress = selectedOption.dataset.address;
        const date = scheduleDateInput.value;
        const isUrgent = scheduleUrgentCheckbox.checked;

        const timeSlots = [];
        document.querySelectorAll('.time-slot-input').forEach(slot => {
            const start = slot.querySelector('.slot-start').value;
            const end = slot.querySelector('.slot-end').value;
            if (start && end) {
                timeSlots.push({ startTime: start, endTime: end });
            }
        });

        if (!locationId || !date || timeSlots.length === 0) {
            alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç.');
            return;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
            const scheduleDocRef = await db.collection('schedule').add({
                locationId,
                locationName,
                locationAddress,
                date: new Date(date),
                isUrgent
            });
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            const batch = db.batch();
            timeSlots.forEach(slot => {
                const slotDocRef = db.collection('timeSlots').doc();
                batch.set(slotDocRef, {
                    scheduleId: scheduleDocRef.id,
                    startTime: slot.startTime,
                    endTime: slot.endTime,
                    status: '—Å–≤–æ–±–æ–¥–µ–Ω',
                    bookedBy: null,
                    agentName: null
                });
            });
            await batch.commit();

            alert('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä–∞—Ñ–∏–∫!');
            scheduleForm.reset();
            timeSlotsContainer.innerHTML = '';
            addSlotInput();
            renderSchedules(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É.');
        }
    });

    // 5. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    async function renderSchedules() {
        scheduleList.innerHTML = '<div class="spinner"></div>';
        try {
            const snapshot = await db.collection('schedule').orderBy('date', 'desc').get();
            if (snapshot.empty) {
                scheduleList.innerHTML = '<p>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.</p>';
                return;
            }
            let listHTML = '';
            snapshot.forEach(doc => {
                const schedule = doc.data();
                const date = schedule.date.toDate().toLocaleDateString('ru-RU');
                const urgentClass = schedule.isUrgent ? 'urgent' : '';
                listHTML += `
                    <div class="schedule-item ${urgentClass}">
                        <strong>${schedule.locationName}</strong>
                        <small>${date} ${schedule.isUrgent ? 'üî•' : ''}</small>
                    </div>
                `;
            });
            scheduleList.innerHTML = listHTML;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:", error);
            scheduleList.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫.</p>';
        }
    }
    
    // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ–∞–π–ª–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ –≤—ã—Ö–æ–¥–æ–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã) ...
});
